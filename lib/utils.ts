import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Format price consistently for both server and client
export function formatPrice(price: string | number): string {
  if (typeof price === 'string' && price === "Li√™n h·ªá") {
    return price
  }
  
  const numPrice = typeof price === 'string' ? parseFloat(price) : price
  
  // Round to nearest integer and format with comma as thousand separator
  return Math.round(numPrice).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',')
}

/**
 * L√†m tr√≤n s·ªë ti·ªÅn v·ªÅ h√†ng ngh√¨n (000), m·∫∑c ƒë·ªãnh l√†m tr√≤n l√™n,
 * nh∆∞ng n·∫øu l√†m tr√≤n l√™n khi·∫øn h√†ng ch·ª•c ngh√¨n (0000) tƒÉng 1 th√¨ l√†m tr√≤n xu·ªëng.
 * @param amount S·ªë ti·ªÅn c·∫ßn l√†m tr√≤n
 * @returns S·ªë ti·ªÅn ƒë√£ l√†m tr√≤n
 */
export function roundMoney(amount: number): number {
  const roundedUp = Math.ceil(amount / 1000) * 1000;
  const roundedDown = Math.floor(amount / 1000) * 1000;
  // N·∫øu l√†m tr√≤n l√™n khi·∫øn h√†ng 0000 tƒÉng 1, th√¨ l√†m tr√≤n xu·ªëng
  const upTenThousands = Math.floor(roundedUp / 10000);
  const curTenThousands = Math.floor(amount / 10000);
  if (upTenThousands > curTenThousands) {
    return roundedDown;
  }
  // return roundedUp;  
  return amount; 

}

/**
 * In ra c√°c bi·∫øn m√¥i tr∆∞·ªùng client-side (NEXT_PUBLIC_*)
 * C√≥ th·ªÉ g·ªçi t·ª´ console tr√¨nh duy·ªát: printEnv()
 */
export function printEnv() {
  const env: Record<string, string | undefined> = {};
  
  // Ch·ªâ l·∫•y c√°c bi·∫øn m√¥i tr∆∞·ªùng NEXT_PUBLIC_* (c√≥ th·ªÉ truy c·∫≠p t·ª´ client)
  if (typeof window !== 'undefined') {
    console.log('üîç Debug process.env:', process.env);
    
    for (const key in process.env) {
      if (key.startsWith('NEXT_PUBLIC_')) {
        env[key] = process.env[key];
      }
    }
    
    // Th·ª≠ truy c·∫≠p tr·ª±c ti·∫øp
    const directAccess = process.env.NEXT_PUBLIC_API_URL;
    console.log('üéØ Direct access NEXT_PUBLIC_API_URL:', directAccess);
    
    console.log('üåç Client Environment Variables:', env);
    console.log('üìù Tip: Only NEXT_PUBLIC_* variables are accessible on client side');
    return env;
  } else {
    console.log('‚ùå printEnv() should be called on client side only');
    return {};
  }
}

/**
 * In ra th√¥ng tin user hi·ªán t·∫°i ƒëang ƒëƒÉng nh·∫≠p
 * C√≥ th·ªÉ g·ªçi t·ª´ console tr√¨nh duy·ªát: userInfo()
 */
export function userInfo() {
  if (typeof window !== 'undefined') {
    try {
      // Truy c·∫≠p zustand store t·ª´ window object
      const authStore = (window as any).useAuthStore?.getState?.();
      if (authStore) {
        const { user, token, isAuthenticated, isLoading, error } = authStore;
        console.log('üë§ Current User Info:', user);
        console.log('   üîê Authenticated:', isAuthenticated);
        if (user) {
          console.log('   üÜî ID:', user.id);
          console.log('   üìß Email:', user.email);
          console.log('   üë§ First Name:', user.firstName);
          console.log('   üë§ Last Name:', user.lastName);
          console.log('   üì± Phone:', user.phoneNumber);
          console.log('   üè¢ Company:', user.company);
          console.log('   üè∑Ô∏è  Role:', user.role);
          console.log('   ‚úÖ isActive:', user.isActive);
          console.log('   üñºÔ∏è  Avatar:', user.avatar);
          console.log('   üïí Created At:', user.createdAt);
          console.log('   üïí Updated At:', user.updatedAt);
        } else {
          console.log('   üìß User Data: null');
        }
        console.log('   üé´ Token:', token ? `${token.substring(0, 20)}...` : 'No token');
        console.log('   ‚è≥ Loading:', isLoading);
        console.log('   ‚ùå Error:', error);
        // Th√¥ng tin t·ª´ cookies
        const cookieToken = document.cookie
          .split('; ')
          .find(row => row.startsWith('auth-token='))
          ?.split('=')[1];
        console.log('   üç™ Cookie Token:', cookieToken ? `${cookieToken.substring(0, 20)}...` : 'No cookie token');
        // Th√¥ng tin t·ª´ localStorage
        const localStorageAuth = localStorage.getItem('auth-storage');
        console.log('   üíæ LocalStorage Auth:', localStorageAuth ? JSON.parse(localStorageAuth) : 'No localStorage data');
        return {
          user,
          token,
          isAuthenticated,
          isLoading,
          error,
          cookieToken,
          localStorageAuth: localStorageAuth ? JSON.parse(localStorageAuth) : null
        };
      } else {
        console.log('‚ùå Auth store not found. Make sure useAuthStore is exposed on window.');
        return null;
      }
    } catch (err) {
      console.error('‚ùå Error getting user info:', err);
      return null;
    }
  } else {
    console.log('‚ùå userInfo() should be called on client side only');
    return null;
  }
}
